{"ast":null,"code":"var _jsxFileName = \"/Users/bsuravar/github/ncert-smart-viewer/client/src/components/PdfViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Document, Page, pdfjs } from 'react-pdf';\nimport axios from 'axios';\nimport { Card, Spin, message } from 'antd'; // Ant Design components\n\n// Set the workerSrc to load the PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.js`;\nfunction PdfViewer({\n  chapterId\n}) {\n  _s();\n  const [pdfBlob, setPdfBlob] = useState(null);\n  const [numPages, setNumPages] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const API_URL = process.env.REACT_APP_API_URL;\n  useEffect(() => {\n    if (chapterId) {\n      setLoading(true);\n      // Fetch the PDF from the server\n      axios.get(`${API_URL}/chapters/pdf/${chapterId}`, {\n        responseType: 'blob'\n      }).then(response => {\n        setPdfBlob(response.data);\n        setLoading(false);\n      }).catch(error => {\n        console.error(\"Error fetching PDF:\", error);\n        message.error('Failed to load PDF');\n        setLoading(false);\n      });\n    }\n  }, [chapterId, API_URL]);\n  const onDocumentLoadSuccess = ({\n    numPages\n  }) => {\n    setNumPages(numPages);\n  };\n  if (!pdfBlob) {\n    return /*#__PURE__*/_jsxDEV(Spin, {\n      size: \"large\",\n      style: {\n        marginTop: '50px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this); // AntD spinner while loading\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '100vh',\n      overflow: 'hidden'\n    },\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      bordered: false,\n      style: {\n        width: '100%',\n        height: '100%',\n        overflowY: 'auto',\n        padding: 0\n      },\n      bodyStyle: {\n        height: '100%',\n        width: '100%'\n      } // Adjust card body to fit full screen\n      ,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: '100%',\n          overflowY: 'auto',\n          padding: '10px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Document, {\n          file: URL.createObjectURL(pdfBlob) // Create object URL from the blob\n          ,\n          onLoadSuccess: onDocumentLoadSuccess,\n          onLoadError: error => {\n            console.error(\"PDF loading error:\", error);\n            message.error('Failed to load PDF document');\n          },\n          children: Array.from(new Array(numPages), (el, index) => /*#__PURE__*/_jsxDEV(Page, {\n            pageNumber: index + 1,\n            width: '1000' // Set page width to fit screen with some padding\n          }, `page_${index + 1}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(PdfViewer, \"UvahY08evGWHSfnLKDq/5ht1GMg=\");\n_c = PdfViewer;\nexport default PdfViewer;\nvar _c;\n$RefreshReg$(_c, \"PdfViewer\");","map":{"version":3,"names":["React","useEffect","useState","Document","Page","pdfjs","axios","Card","Spin","message","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","PdfViewer","chapterId","_s","pdfBlob","setPdfBlob","numPages","setNumPages","loading","setLoading","API_URL","process","env","REACT_APP_API_URL","get","responseType","then","response","data","catch","error","console","onDocumentLoadSuccess","size","style","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","width","height","overflow","children","bordered","overflowY","padding","bodyStyle","file","URL","createObjectURL","onLoadSuccess","onLoadError","Array","from","el","index","pageNumber","_c","$RefreshReg$"],"sources":["/Users/bsuravar/github/ncert-smart-viewer/client/src/components/PdfViewer.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Document, Page, pdfjs } from 'react-pdf';\nimport axios from 'axios';\nimport { Card, Spin, message } from 'antd'; // Ant Design components\n\n// Set the workerSrc to load the PDF.js worker\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.js`;\n\nfunction PdfViewer({ chapterId }) {\n  const [pdfBlob, setPdfBlob] = useState(null);\n  const [numPages, setNumPages] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const API_URL = process.env.REACT_APP_API_URL;\n\n  useEffect(() => {\n    if (chapterId) {\n      setLoading(true);\n      // Fetch the PDF from the server\n      axios.get(`${API_URL}/chapters/pdf/${chapterId}`, { responseType: 'blob' })\n        .then((response) => {\n          setPdfBlob(response.data);\n          setLoading(false);\n        })\n        .catch((error) => {\n          console.error(\"Error fetching PDF:\", error);\n          message.error('Failed to load PDF');\n          setLoading(false);\n        });\n    }\n  }, [chapterId, API_URL]);\n\n  const onDocumentLoadSuccess = ({ numPages }) => {\n    setNumPages(numPages);\n  };\n\n  if (!pdfBlob) {\n    return <Spin size=\"large\" style={{ marginTop: '50px' }} />; // AntD spinner while loading\n  }\n\n  return (\n    <div style={{ width: '100%', height: '100vh', overflow: 'hidden' }}>\n      <Card\n        bordered={false}\n        style={{ width: '100%', height: '100%', overflowY: 'auto', padding: 0 }}\n        bodyStyle={{ height: '100%', width: '100%' }} // Adjust card body to fit full screen\n      >\n        <div style={{ height: '100%', overflowY: 'auto', padding: '10px' }}>\n          <Document\n            file={URL.createObjectURL(pdfBlob)} // Create object URL from the blob\n            onLoadSuccess={onDocumentLoadSuccess}\n            onLoadError={(error) => {\n              console.error(\"PDF loading error:\", error);\n              message.error('Failed to load PDF document');\n            }}\n          >\n            {/* Render each page */}\n            {Array.from(new Array(numPages), (el, index) => (\n              <Page\n                key={`page_${index + 1}`}\n                pageNumber={index + 1}\n                width={'1000'} // Set page width to fit screen with some padding\n              />\n            ))}\n          </Document>\n        </div>\n      </Card>\n    </div>\n  );\n}\n\nexport default PdfViewer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}