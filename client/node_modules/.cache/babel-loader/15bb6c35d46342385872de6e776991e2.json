{"ast":null,"code":"var _jsxFileName = \"/Users/bsuravar/github/ncert-smart-viewer/client/src/components/PdfViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Document, Page, pdfjs } from 'react-pdf';\nimport axios from 'axios';\n\n// Set the workerSrc to load the PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.js`;\nfunction PdfViewer({\n  chapterId\n}) {\n  _s();\n  const [pdfBlob, setPdfBlob] = useState(null);\n  const API_URL = process.env.REACT_APP_API_URL;\n  useEffect(() => {\n    if (chapterId) {\n      // Fetch the PDF from the server\n      axios.get(`${API_URL}/chapters/pdf/${chapterId}`, {\n        responseType: 'blob'\n      }).then(response => {\n        setPdfBlob(response.data);\n      }).catch(error => {\n        console.error(\"Error fetching PDF:\", error);\n      });\n    }\n  }, [chapterId, API_URL]);\n  if (!pdfBlob) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading PDF...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Document, {\n      file: URL.createObjectURL(pdfBlob) // Create object URL from the blob\n      ,\n      onLoadError: console.error // Handle error if there's an issue loading\n      ,\n      children: /*#__PURE__*/_jsxDEV(Page, {\n        pageNumber: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(PdfViewer, \"Fc73xQ3aEoYdd1OJDMjuSvQSkyY=\");\n_c = PdfViewer;\nexport default PdfViewer;\nvar _c;\n$RefreshReg$(_c, \"PdfViewer\");","map":{"version":3,"names":["React","useEffect","useState","Document","Page","pdfjs","axios","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","PdfViewer","chapterId","_s","pdfBlob","setPdfBlob","API_URL","process","env","REACT_APP_API_URL","get","responseType","then","response","data","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","file","URL","createObjectURL","onLoadError","pageNumber","_c","$RefreshReg$"],"sources":["/Users/bsuravar/github/ncert-smart-viewer/client/src/components/PdfViewer.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Document, Page, pdfjs } from 'react-pdf';\nimport axios from 'axios';\n\n// Set the workerSrc to load the PDF.js worker\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.js`;\n\nfunction PdfViewer({ chapterId }) {\n  const [pdfBlob, setPdfBlob] = useState(null);\n  const API_URL = process.env.REACT_APP_API_URL;\n\n  useEffect(() => {\n    if (chapterId) {\n      // Fetch the PDF from the server\n      axios.get(`${API_URL}/chapters/pdf/${chapterId}`, { responseType: 'blob' })\n        .then((response) => {\n          setPdfBlob(response.data);\n        })\n        .catch((error) => {\n          console.error(\"Error fetching PDF:\", error);\n        });\n    }\n  }, [chapterId, API_URL]);\n\n  if (!pdfBlob) {\n    return <div>Loading PDF...</div>;\n  }\n\n  return (\n    <div>\n      <Document\n        file={URL.createObjectURL(pdfBlob)} // Create object URL from the blob\n        onLoadError={console.error} // Handle error if there's an issue loading\n      >\n        <Page pageNumber={1} />\n      </Document>\n    </div>\n  );\n}\n\nexport default PdfViewer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,EAAEC,IAAI,EAAEC,KAAK,QAAQ,WAAW;AACjD,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAH,KAAK,CAACI,mBAAmB,CAACC,SAAS,GAAG,2CAA2CL,KAAK,CAACM,OAAO,oBAAoB;AAElH,SAASC,SAASA,CAAC;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EAChC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAMe,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;EAE7CnB,SAAS,CAAC,MAAM;IACd,IAAIY,SAAS,EAAE;MACb;MACAP,KAAK,CAACe,GAAG,CAAC,GAAGJ,OAAO,iBAAiBJ,SAAS,EAAE,EAAE;QAAES,YAAY,EAAE;MAAO,CAAC,CAAC,CACxEC,IAAI,CAAEC,QAAQ,IAAK;QAClBR,UAAU,CAACQ,QAAQ,CAACC,IAAI,CAAC;MAC3B,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC7C,CAAC,CAAC;IACN;EACF,CAAC,EAAE,CAACd,SAAS,EAAEI,OAAO,CAAC,CAAC;EAExB,IAAI,CAACF,OAAO,EAAE;IACZ,oBAAOP,OAAA;MAAAqB,QAAA,EAAK;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAClC;EAEA,oBACEzB,OAAA;IAAAqB,QAAA,eACErB,OAAA,CAACL,QAAQ;MACP+B,IAAI,EAAEC,GAAG,CAACC,eAAe,CAACrB,OAAO,CAAE,CAAC;MAAA;MACpCsB,WAAW,EAAET,OAAO,CAACD,KAAM,CAAC;MAAA;MAAAE,QAAA,eAE5BrB,OAAA,CAACJ,IAAI;QAACkC,UAAU,EAAE;MAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACf;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEV;AAACnB,EAAA,CA/BQF,SAAS;AAAA2B,EAAA,GAAT3B,SAAS;AAiClB,eAAeA,SAAS;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}